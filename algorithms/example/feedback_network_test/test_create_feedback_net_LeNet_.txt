Forward network:
Sequential(
  (0): Sequential(
    (conv): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (rho): ELU(alpha=1.0)
    (pool): AvgPool2d(kernel_size=3, stride=2, padding=1)
  )
  (1): Sequential(
    (conv): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (rho): ELU(alpha=1.0)
    (pool): AvgPool2d(kernel_size=3, stride=2, padding=1)
  )
  (2): Sequential(
    (reshape): Reshape((torch.Size([64, 8, 8]) -> torch.Size([4096])))
    (linear1): Linear(in_features=4096, out_features=512, bias=True)
    (rho): ELU(alpha=1.0)
  )
  (3): Sequential(
    (linear1): Linear(in_features=512, out_features=10, bias=True)
  )
)
Feedback network:
Sequential(
  (3): Sequential(
    (linear1): Linear(in_features=10, out_features=512, bias=True)
  )
  (2): Sequential(
    (rho): ELU(alpha=1.0)
    (linear1): Linear(in_features=512, out_features=4096, bias=True)
    (reshape): Reshape((torch.Size([4096]) -> (64, 8, 8)))
  )
  (1): Sequential(
    (pool): AdaptiveAvgPool2d(output_size=torch.Size([16, 16]))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(64, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  )
  (0): Sequential(
    (pool): AdaptiveAvgPool2d(output_size=torch.Size([32, 32]))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(32, 3, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  )
)
