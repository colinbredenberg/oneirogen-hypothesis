forward net:
LeNet(
  (0): LeNetBlock(
    (conv): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (rho): ELU(alpha=1.0)
    (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  )
  (1): LeNetBlock(
    (conv): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (rho): ELU(alpha=1.0)
    (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  )
  (2): Sequential(
    (reshape): Reshape((torch.Size([64, 8, 8]) -> torch.Size([4096])))
    (linear1): Linear(in_features=4096, out_features=512, bias=True)
    (rho): ELU(alpha=1.0)
  )
  (3): Sequential(
    (linear1): Linear(in_features=512, out_features=10, bias=True)
  )
)
feedback net:
ConvFeedbackNetwork(
  (0): Sequential(
    (linear1): Linear(in_features=10, out_features=512, bias=True)
  )
  (1): Sequential(
    (rho): ELU(alpha=1.0)
    (linear1): Linear(in_features=512, out_features=4096, bias=True)
    (reshape): Reshape((torch.Size([4096]) -> (64, 8, 8)))
  )
  (2): ConvFeedbackBlock(
    (pool): MaxUnpool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(64, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  )
  (3): ConvFeedbackBlock(
    (pool): MaxUnpool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(32, 3, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  )
)
