Forward network:
Sequential(
  (0): Sequential(
    (conv): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (rho): ELU(alpha=1.0)
    (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
  )
  (1): Sequential(
    (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (rho): ELU(alpha=1.0)
    (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
  )
  (2): Sequential(
    (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (rho): ELU(alpha=1.0)
    (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
  )
  (3): Sequential(
    (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (rho): ELU(alpha=1.0)
    (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
  )
  (4): Sequential(
    (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (rho): ELU(alpha=1.0)
    (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
  )
  (5): Sequential(
    (reshape): Reshape((torch.Size([512, 1, 1]) -> torch.Size([512])))
    (linear): Linear(in_features=512, out_features=10, bias=True)
  )
)
Feedback network:
Sequential(
  (5): Sequential(
    (linear): Linear(in_features=10, out_features=512, bias=True)
    (reshape): Reshape((torch.Size([512]) -> (512, 1, 1)))
  )
  (4): Sequential(
    (pool): AdaptiveAvgPool2d(output_size=torch.Size([2, 2]))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (3): Sequential(
    (pool): AdaptiveAvgPool2d(output_size=torch.Size([4, 4]))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (2): Sequential(
    (pool): AdaptiveAvgPool2d(output_size=torch.Size([8, 8]))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (1): Sequential(
    (pool): AdaptiveAvgPool2d(output_size=torch.Size([16, 16]))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (0): Sequential(
    (pool): AdaptiveAvgPool2d(output_size=torch.Size([32, 32]))
    (rho): ELU(alpha=1.0)
    (conv): ConvTranspose2d(128, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
